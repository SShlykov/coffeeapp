// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Testing <Thanks /> Testing snap & state Thanks has rendered correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Thanks />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h2
          className="title thanksTitle"
        >
          Thank you so much
          <br />
          We contact you as soon as posible
        </h2>,
        <div
          className="cofmafImage"
        >
          <img
            alt="icon"
            src="CofMaf.png"
          />
        </div>,
        <div
          className="centred"
        >
          <button
            className="anotherButton"
            onClick={[Function]}
          >
            Another ?  
            <img
              alt="↩"
              src="ArrowLeft.png"
            />
          </button>
        </div>,
      ],
      "className": "thanksBlock",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "Thank you so much",
            <br />,
            "We contact you as soon as posible",
          ],
          "className": "title thanksTitle",
        },
        "ref": null,
        "rendered": Array [
          "Thank you so much",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "br",
          },
          "We contact you as soon as posible",
        ],
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <img
            alt="icon"
            src="CofMaf.png"
          />,
          "className": "cofmafImage",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "alt": "icon",
            "src": "CofMaf.png",
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <button
            className="anotherButton"
            onClick={[Function]}
          >
            Another ?  
            <img
              alt="↩"
              src="ArrowLeft.png"
            />
          </button>,
          "className": "centred",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "Another ?  ",
              <img
                alt="↩"
                src="ArrowLeft.png"
              />,
            ],
            "className": "anotherButton",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": Array [
            "Another ?  ",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "alt": "↩",
                "src": "ArrowLeft.png",
              },
              "ref": null,
              "rendered": null,
              "type": "img",
            },
          ],
          "type": "button",
        },
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h2
            className="title thanksTitle"
          >
            Thank you so much
            <br />
            We contact you as soon as posible
          </h2>,
          <div
            className="cofmafImage"
          >
            <img
              alt="icon"
              src="CofMaf.png"
            />
          </div>,
          <div
            className="centred"
          >
            <button
              className="anotherButton"
              onClick={[Function]}
            >
              Another ?  
              <img
                alt="↩"
                src="ArrowLeft.png"
              />
            </button>
          </div>,
        ],
        "className": "thanksBlock",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "Thank you so much",
              <br />,
              "We contact you as soon as posible",
            ],
            "className": "title thanksTitle",
          },
          "ref": null,
          "rendered": Array [
            "Thank you so much",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "br",
            },
            "We contact you as soon as posible",
          ],
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <img
              alt="icon"
              src="CofMaf.png"
            />,
            "className": "cofmafImage",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "alt": "icon",
              "src": "CofMaf.png",
            },
            "ref": null,
            "rendered": null,
            "type": "img",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <button
              className="anotherButton"
              onClick={[Function]}
            >
              Another ?  
              <img
                alt="↩"
                src="ArrowLeft.png"
              />
            </button>,
            "className": "centred",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                "Another ?  ",
                <img
                  alt="↩"
                  src="ArrowLeft.png"
                />,
              ],
              "className": "anotherButton",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Array [
              "Another ?  ",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "alt": "↩",
                  "src": "ArrowLeft.png",
                },
                "ref": null,
                "rendered": null,
                "type": "img",
              },
            ],
            "type": "button",
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
